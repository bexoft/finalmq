<%
var splitFileOutputH = fileOutputH.split('/')
var fileInclude = splitFileOutputH[splitFileOutputH.length - 1]
%>
#include "<%- fileInclude %>"


<%
if (data.namespace)
{
data.namespace.trim();
if (data.namespace.length > 0)
{
var namespaces = data.namespace.split('.')
for (var i = 0; i < namespaces.length; i++) { 
var ns = namespaces[i] 
%>
namespace <%- ns %> { <% -%>
<% }}} %>    


//////////////////////////////
// Enums
//////////////////////////////

<% for (var i = 0; i < data.enums.length; i++) {
    var en = data.enums[i]
    var plaintype = helper.getPlainType(en.type) %>
<%- plaintype %>::<%- plaintype %>()
{
}
<%- plaintype %>::<%- plaintype %>(Enum en)
    : m_value(en)
{
}
<%- plaintype %>::operator const Enum&() const
{
    return m_value;
}
<%- plaintype %>::operator Enum&()
{
    return m_value;
}
const <%- plaintype %>& <%- plaintype %>::operator =(Enum en)
{
    m_value = en;
    return *this;
}
const std::string& <%- plaintype %>::toName() const
{
    return _enumInfo.getMetaEnum().getNameByValue(m_value);
}
const std::string& <%- plaintype %>::toString() const
{
    return _enumInfo.getMetaEnum().getAliasByValue(m_value);
}
void <%- plaintype %>::fromString(const std::string& name)
{
    m_value = static_cast<Enum>(_enumInfo.getMetaEnum().getValueByName(name));
}
const finalmq::EnumInfo <%- plaintype %>::_enumInfo = {
    "<%- helper.typeWithNamespace(data, en.type, '.') %>", "<%- en.desc %>", <%- helper.convertAttrs(en.attrs) %>, {<% -%>
        <% for (var n = 0; n < en.entries.length; n++) { 
            var entry = en.entries[n] %>
        {"<%- entry.name %>", <%- entry.id %>, "<%- entry.desc %>", "<%- entry.alias %>"},<% -%>
        <% } %>
     }
};
<% } %>



//////////////////////////////
// Structs
//////////////////////////////

<%
for (var i = 0; i < data.structs.length; i++)
{
    var stru = data.structs[i]
    var plaintype = helper.getPlainType(stru.type) %>

<%- plaintype %>::<%- plaintype %>()
{
}
<% if (stru.fields.length > 0) { %>
<%- plaintype %>::<%- plaintype %>(<% -%>
<% for (var n = 0; n < stru.fields.length; n++) {
        field = stru.fields[n] %><% -%>
const <%- helper.tid2type(data, field) %>& <%- field.name %>_<% if (n < stru.fields.length-1){ %>, <% } %><% -%>
<% } %>)
<% for (var n = 0; n < stru.fields.length; n++) {
    field = stru.fields[n] %><% -%>
    <% if (n == 0){ %>:<% } else { %>,<% } %> <%- field.name %>(<%- field.name %>_)
<% } %><% -%>
{
}
<% } %>
void <%- plaintype %>::clear()
{
    *this = <%- plaintype %>();
}
const finalmq::StructInfo& <%- plaintype %>::getStructInfo() const
{
    return _structInfo;
}
std::shared_ptr<finalmq::StructBase> <%- plaintype %>::clone() const
{
    return std::make_shared<<%- plaintype %>>(*this);
}

bool <%- plaintype %>::operator ==(const <%- plaintype %>& <% if (stru.fields.length == 0) { %>/*<% } %>rhs<% if (stru.fields.length == 0) { %>*/<% } %>) const
{
<% if (stru.fields.length > 0) { %>
    return (<% for (var n = 0; n < stru.fields.length; n++) {
    field = stru.fields[n] %>
<% if (field.tid == 'TYPE_STRUCT' && helper.isNullable(field)) {%>
            ((<%- field.name %> == rhs.<%- field.name %>) || ((<%- field.name %> != nullptr) && (<%- field.name %> != nullptr) && (*<%- field.name %> == *rhs.<%- field.name %>)))<% if (n < stru.fields.length-1){ %> &&<% } %><% -%>
<% } else { -%>
            <%- field.name %> == rhs.<%- field.name %><% if (n < stru.fields.length-1){ %> &&<% } %><% -%>
<% } %>
<% } -%>);
<% } else { -%>
    return true;
<% } -%>
}
bool <%- plaintype %>::operator !=(const <%- plaintype %>& rhs) const
{
    return !(*this == rhs);
}
const finalmq::StructInfo <%- plaintype %>::_structInfo = {
    "<%- helper.typeWithNamespace(data, stru.type, '.') %>", "<%- stru.desc %>", <%- helper.convertStructFlags(stru.flags) %>, <%- helper.convertAttrs(field.attrs) %>, [] () { return std::make_shared<<%- plaintype %>>(); }, {<% -%>
    <% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
		if (field.tid == 'TYPE_VARIANT')
		{
			field = {tid:'TYPE_STRUCT', type:'finalmq.variant.VarValue', name:field.name, desc:field.desc, flags:field.flags, attrs:field.attrs};
		}
		%>
        {finalmq::<%- field.tid %>, "<%- helper.typeWithNamespace(data, field.type, '.') %>", "<%- field.name %>", "<%- field.desc %>", <%- helper.convertFlags(field.flags) %>, <%- helper.convertAttrs(field.attrs) %>, <%- n %>},<% -%>
    <% } %>
     },{<% -%>
    <% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
		if (field.tid == 'TYPE_VARIANT')
		{
			field = {tid:'TYPE_STRUCT', type:'finalmq.variant.VarValue', name:field.name, desc:field.desc, flags:field.flags, attrs:field.attrs};
		}
		%>
        {<%- helper.getOffset(field.tid) %>(<%- plaintype %>, <%- field.name %>)<% if (field.tid == 'TYPE_ARRAY_STRUCT') {%>, new finalmq::ArrayStructAdapter<<%- helper.typeWithNamespace(data, field.type, '::') %>><% } %><% if (field.tid == 'TYPE_STRUCT' && helper.isNullable(field)) {%>, nullptr, new finalmq::StructPtrAdapter<<%- helper.typeWithNamespace(data, field.type, '::') %>><% } %>},<% -%>
    <% } %>
     }
};

<% } %>

<%
if (data.namespace)
{
if (data.namespace.length > 0)
{
for (var i = 0; i < namespaces.length; i++) { 
var ns = namespaces[namespaces.length - 1 - i] %>
} // close namespace <%- ns %> <% -%>
<% }}} %>    


