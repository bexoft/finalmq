#include "serializestruct/StructBase.h"


<%
if (data.namespace)
{
data.namespace.trim();
if (data.namespace.length > 0)
{
var namespaces = data.namespace.split('.')
for (var i = 0; i < namespaces.length; i++) { 
var ns = namespaces[i] 
%>
namespace <%- ns %> { <% -%>
<% }}} %>    


//////////////////////////////
// Enums
//////////////////////////////

<% for (var i = 0; i < data.enums.length; i++) {
    var en = data.enums[i]
    var plaintype = helper.getPlainType(en.type) %>
class <%- plaintype %>
{
public:
    enum Enum : std::int32_t {<% -%>
        <% for (var n = 0; n < en.entries.length; n++) { 
            var entry = en.entries[n] %>
        <%- entry.name %> = <%- entry.id %>,<% -%>
        <% } %>
    };

    <%- plaintype %>();
    <%- plaintype %>(Enum en);
    operator const Enum&() const;
    operator Enum&();
    const <%- plaintype %>& operator =(Enum en);
    const std::string& toString() const;
    void fromString(const std::string& name);

private:
    Enum m_value = <%- helper.getDefaultEnum(en.entries).name %>;
    static const EnumInfo _enumInfo;
};
<% } %>



//////////////////////////////
// Structs
//////////////////////////////

<% for (var i = 0; i < data.structs.length; i++)
{
    var stru = data.structs[i]
    var plaintype = helper.getPlainType(stru.type) %>
class <%- plaintype %> : public StructBase
{
public:<% -%>
<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] %>
    <%- helper.tid2type(data, field.tid, field.type) %> <%- field.name %><% if (helper.tid2default(field.tid)){%> = <%- helper.tid2default(field.tid)%><% } %>;<% -%>
<% } %>

    <%- plaintype %>();
    <%- plaintype %>(<% -%>
<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] %><% -%>
const <%- helper.tid2type(data, field.tid, field.type) %>& <%- field.name %>_<% if (n < stru.fields.length-1){ %>, <% } %><% -%>
<% } %>);
    bool operator ==(const <%- plaintype %>& rhs) const;
    bool operator !=(const <%- plaintype %>& rhs) const;

private:
    virtual void clear() override;
    virtual const StructInfo& getStructInfo() const override;
    static const StructInfo _structInfo;
};
<% } %>

<%
if (data.namespace)
{
if (data.namespace.length > 0)
{
for (var i = 0; i < namespaces.length; i++) { 
var ns = namespaces[namespaces.length - 1 - i] %>
} // close namespace <%- ns %> <% -%>
<% }}} %>    


