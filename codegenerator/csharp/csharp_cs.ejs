
using System.Runtime.CompilerServices;


#pragma warning disable IDE1006 // Benennungsstile

<%
if (data.namespace)
{
data.namespace.trim();
if (data.namespace.length > 0)
{
var namespaces = data.namespace.split('.')
for (var i = 0; i < namespaces.length; i++) { 
var ns = namespaces[i] 
%>
namespace <%- ns %> { <% -%>
<% }}} %>    


//////////////////////////////
// Enums
//////////////////////////////

<% for (var i = 0; i < data.enums.length; i++) {
    var en = data.enums[i]
    var plaintype = helper.getPlainType(en.type) %>
[finalmq.MetaEnum("<%- en.desc %>")]
public enum <%- plaintype %>
{<% for (var n = 0; n < en.entries.length; n++) { 
    var entry = en.entries[n] %>
	[finalmq.MetaEnumEntry("<%- entry.desc %>", "<%- entry.alias %>")]
    <%- entry.name %> = <%- entry.id %>,<% -%>
<% } %>
}
class Register<%- plaintype %>
{
#pragma warning disable CA2255 // Attribut "ModuleInitializer" nicht in Bibliotheken verwenden
    [ModuleInitializer]
#pragma warning restore CA2255 // Attribut "ModuleInitializer" nicht in Bibliotheken verwenden
    internal static void RegisterEnum()
    {
		finalmq.MetaEnum metaEnum = finalmq.StructBase.CreateMetaEnum(typeof(<%- plaintype %>));
        finalmq.TypeRegistry.Instance.RegisterEnum(typeof(<%- en.type %>), metaEnum);
    }
}
<% } %>



//////////////////////////////
// Structs
//////////////////////////////


<% for (var i = 0; i < data.structs.length; i++)
{
    var stru = data.structs[i]
    var plaintype = helper.getPlainType(stru.type)
    if (stru.desc == null)
    {
        stru.desc = '';
    }
    if (stru.flags == null)
    {
        stru.flags = 0
    }
    %>
[finalmq.MetaStruct("<%- stru.desc %>"<% if (stru.flags.length > 0) {%>, <% for (var m = 0; m < stru.flags.length; m++) { %>finalmq.MetaStructFlags.<%- stru.flags[m]%><% if (m != stru.flags.length - 1) { %> | <% }}} %>)]
public class <%- plaintype %> : finalmq.StructBase, IEquatable<<%- plaintype %>>
{
    public <%- plaintype %>()
	{
	}
	
<% if (stru.fields.length > 0) { %>
    public <%- plaintype %>(<% -%>
<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
        if (field.desc == null)
        {
            field.desc = '';
        }
        if (field.flags == null)
        {
            field.flags = 0
        }
        %><% -%>
<%- helper.tid2type(data, field) %> <%- field.name %><% if (n < stru.fields.length-1){ %>, <% } %><% -%>
<% } -%>)
	{
<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] %><% -%>
		m_<%- field.name %> = <%- field.name %>;
<% } -%>
	}
<% } -%>

<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
        -%>
	[finalmq.MetaField("<%- field.desc %>"<% if (field.flags.length > 0) {%>, <% for (var m = 0; m < field.flags.length; m++) { %>finalmq.MetaFieldFlags.<%- field.flags[m]%><% if (m != field.flags.length - 1) { %> | <% }}} %>)]
    public <%- helper.tid2type(data, field) %> <%- field.name %>
	{
		get { return m_<%- field.name %>; }
		set { m_<%- field.name %> = value; }
	}
<% } -%>
<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
        %>
    <%- helper.tid2type(data, field) %> m_<%- field.name %><% if (helper.tid2default(data, field)){%> = <%- helper.tid2default(data, field)%><% } %>;<% -%>
<% } %>

	public bool Equals(<%- plaintype %>? rhs)
	{
		if (rhs == null)
		{
			return false;
		}

		if (this == rhs)
		{
			return true;
		}

<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
	    compareType = helper.tid2CompareType(field) -%>
<%if (compareType == 0) { -%>
		if (m_<%- field.name %> != rhs.m_<%- field.name %>)
		{
			return false;
		}
<% } -%>
<%if (compareType == 1) { -%>
		if (!m_<%- field.name %>.Equals(rhs.m_<%- field.name %>))
		{
			return false;
		}
<% } -%>
<%if (compareType == 2) { -%>
		if (!m_<%- field.name %>.SequenceEqual(rhs.m_<%- field.name %>))
		{
			return false;
		}
<% } -%>
<%if (compareType == 3) { -%>
        if (m_<%- field.name %>.Count != rhs.m_<%- field.name %>.Count)
		{
			return false;
		}
		for (int i = 0; i < m_<%- field.name %>.Count; i++)
		{
			byte[] arr1 = m_<%- field.name %>[i];
			byte[] arr2 = rhs.m_<%- field.name %>[i];
			if (!arr1.SequenceEqual(arr2))
			{
				return false;
			}
		}
<% } -%>
<%if (compareType == 4) { -%>
		if (!((<%- field.name %> == rhs.<%- field.name %>) || ((<%- field.name %> != null) && (<%- field.name %> != null) && <%- field.name %>.Equals(rhs.<%- field.name %>))))
		{
			return false;
		}
<% } -%>
<% } -%>

		return true;
	}

	public override finalmq.MetaStruct MetaStruct
	{
		get
		{
			if (m_metaStruct == null)
			{
				m_metaStruct = finalmq.StructBase.CreateMetaStruct(typeof(<%- plaintype %>));
			}
			return m_metaStruct;
		}
	}
	static finalmq.MetaStruct? m_metaStruct = null;

#pragma warning disable CA2255 // Attribut "ModuleInitializer" nicht in Bibliotheken verwenden
    [ModuleInitializer]
#pragma warning restore CA2255 // Attribut "ModuleInitializer" nicht in Bibliotheken verwenden
    internal static void RegisterStruct()
    {
		m_metaStruct = finalmq.StructBase.CreateMetaStruct(typeof(<%- plaintype %>));
        finalmq.TypeRegistry.Instance.RegisterStruct(typeof(<%- stru.type %>), m_metaStruct, () => { return new <%- stru.type %>(); } );
    }
}
<% } %>

<%
if (data.namespace)
{
if (data.namespace.length > 0)
{
for (var i = 0; i < namespaces.length; i++) { 
var ns = namespaces[namespaces.length - 1 - i] %>
} // close namespace <%- ns %> <% -%>
<% }}} %>    

#pragma warning restore IDE1006 // Benennungsstile

