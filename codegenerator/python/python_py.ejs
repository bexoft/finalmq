
import json

from enum import Enum


'''
//////////////////////////////
// Enums
//////////////////////////////
'''

<% for (var i = 0; i < data.enums.length; i++) {
    var en = data.enums[i]
    var plaintype = helper.getPlainType(en.type) %>
<%- plaintype %> = Enum('<%- plaintype %>', {
<% for (var n = 0; n < en.entries.length; n++) {
    var entry = en.entries[n] -%>
    '<%- entry.name %>' = <%- entry.id %><% if (n < en.entries.length-1){ %>, <% } %>
<% } -%>
})
<% } %>


'''
//////////////////////////////
// Structs
//////////////////////////////
'''

class type_base:
    def toJSON(self):
        return ''.join([x for x in json.dumps(self,default=lambda o: o.__dict__, sort_keys=True,indent=4) if ord(x) > 32])

<% for (var i = 0; i < data.structs.length; i++)
{
    var stru = data.structs[i]
    var plaintype = helper.getPlainType(stru.type) %>

class <%- plaintype %>(type_base):<% -%>
<% if (stru.fields.length > 0) { %>
    def __init__(self, <% -%>
<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
        if (field.desc == null)
        {
            field.desc = '';
        }
        %><% -%>
<%- field.name %>: <%- helper.tid2type(data, field) %><% if (n < stru.fields.length-1){ %>, <% } %><% -%>
<% } -%>):<% -%>
<% for (var n = 0; n < stru.fields.length; n++) { 
        field = stru.fields[n] 
        %>
        self.<%- field.name %> = <%- field.name %><% -%>
<% } -%>
<% } else { %>
    def __init__(self)
        pass<% -%>
<% } %>
<% } %>


